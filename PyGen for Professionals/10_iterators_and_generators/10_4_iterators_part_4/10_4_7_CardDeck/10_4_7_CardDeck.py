'''
TODO:
    Implement a CardDeck class that produces iterators whose constructor takes
    no arguments.

    The CardDeck iterator should generate a sequence of 52 playing cards
    and then raise a StopIteration exception.

    Each card should be a string in the following format:
    <value> <suit>

    For example, 7 of spades, jack of clubs, queen of diamonds, king of hearts,
    ace of spades.

NOTE:
    The cards generated by the iterator should be ordered by value first,
    then by suit.

    The seniority of suits in ascending order is: spades, clubs, diamonds,
    hearts.

    The seniority of cards within a suit in ascending order is: two, three,
    four, five, six, seven, eight, nine, ten, jack, queen, king, ace.

    The suits do not require declination and, regardless of the denomination,
    must retain the following spelling: spades, clubs, diamonds, hearts.
'''
from typing import Iterator

Card = Iterator[str]


class CardDeck:
    """
    A class that generates a sequence of 52 playing cards in order by rank
    and suit.

    The iterator generates cards in the format '<value> <suit>', where:
        - suits are ordered as:
            spades, clubs, diamonds, hearts
        - ranks are ordered as:
            two, three, ..., king, ace.
    """
    def __init__(self):
        """
        Initializes the deck with the four suits and thirteen ranks.
        """
        self.suits = [
            'spades', 'clubs', 'diamonds', 'hearts'
        ]

        self.ranks = [
            2, 3, 4, 5, 6, 7, 8, 9, 10,
            'jack', 'queen', 'king', 'ace'
        ]

        self.suit_index = 0
        self.rank_index = 0

    def __iter__(self) -> Card:
        """
        Returns the iterator object itself.

        Returns:
            Card: The iterator instance.
        """
        return self

    def __next__(self) -> str:
        """
        Returns the next card in the deck.

        The card is represented as a string in the format '<value> <suit>'.

        If all cards have been generated, raises StopIteration.

        Returns:
            str: The next card in the deck.

        Raises:
            StopIteration: When all 52 cards have been generated.
        """
        if self.rank_index >= len(self.ranks):
            self.rank_index = 0
            self.suit_index += 1

        if self.suit_index >= len(self.suits):
            raise StopIteration

        cur_rank = self.ranks[self.rank_index]
        cur_suit = self.suits[self.suit_index]

        card = f'{cur_rank} of {cur_suit}'
        self.rank_index += 1

        return card
